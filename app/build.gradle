plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId 'com.adkom666.shrednotes'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        project.archivesBaseName = "shrednotes-$versionName"

        kapt.arguments {
            arg('room.schemaLocation', "$projectDir/schemas")
        }
    }

    buildTypes {
        debug {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField 'int', 'SHRED_NOTES_VERSION', '1'
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField 'int', 'SHRED_NOTES_VERSION', '1'
        }
    }

    def VENUE_DIMENSION = 'venue'
    flavorDimensions VENUE_DIMENSION
    productFlavors {
        google {
            dimension VENUE_DIMENSION
            versionNameSuffix '-google'
            ext {
                fields = [[type: 'String', name: 'DONATION_SKU', values: [debug: '"android.test.purchased"', release: '"donate"']]]
            }
        }
        catappult {
            dimension VENUE_DIMENSION
            versionNameSuffix '-catappult'
            ext {
                fields = [[type: 'String', name: 'DONATION_SKU', values: [debug: '"donate"', release: '"donate"']]]
            }
        }
    }

    applicationVariants.all { variant ->
        // Get the VENUE dimension flavor
        def venue = variant.getProductFlavors()
                .findAll({ flavor -> flavor.dimension == VENUE_DIMENSION })
                .get(0)
        println "Adding ${venue.ext.fields.size()} custom buildConfigFields for flavor ${variant.name}"
        // Loop over the fields and make appropriate buildConfigField
        venue.ext.fields.each { field ->
            def fldType = field['type']
            def fldName = field['name']
            def fldValues = field['values']
            // Get debug/release specific value from values array
            def fldSpecificValue = fldValues[variant.getBuildType().name]
            println "    => ${fldType} ${fldName} = ${fldSpecificValue}"
            variant.buildConfigField fldType, fldName, fldSpecificValue
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        google.java.srcDirs += 'src/google/kotlin'
        catappult.java.srcDirs += 'src/catappult/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs = ['-XXLanguage:+InlineClasses']
    }

    packagingOptions {
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
    }

    lintOptions {
        abortOnError true
        warningsAsErrors true
        checkReleaseBuilds true
        noLines true
        xmlReport false
    }
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // AndroidX
    def lifecycle_version = '2.3.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation 'androidx.paging:paging-runtime-ktx:3.0.1'

    // Material design
    implementation 'com.google.android.material:material:1.4.0'

    // Database
    def room_version = '2.3.0'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Dependency injection
    def dagger_version = '2.35.1'
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Google
    implementation 'com.google.android.gms:play-services-auth:19.2.0'
    implementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation('com.google.api-client:google-api-client-android:1.23.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Graph
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // Log
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Billing
    googleImplementation 'com.android.billingclient:billing-ktx:4.0.0'
    catappultImplementation 'io.catappult:android-appcoins-billing:0.6.7.0'

    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Dependency injection for testing
    androidTestImplementation "com.google.dagger:dagger:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:$dagger_version"
}
